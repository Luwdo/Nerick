angular.module('ClientSuccess.services').factory('fileService', function(authService, $q, $rootScope) {
  var service;
  service = {};
  service.uploadAvatar = function(file) {
    var apiAuth, deferred, fileReader, postIt, query;
    deferred = $q.defer();
    apiAuth = authService.enableAuth();
    query = {
      binary: null,
      id: null
    };
    postIt = function() {
      var formData;
      formData = new FormData();
      formData.append('file', file);
      formData.append('name', file.name);
      return apiAuth.all('api/employee/myinfo').withHttpConfig({
        transformRequest: angular.identity
      }).customPOST(formData, 'avatar', void 0, {
        'Content-Type': void 0
      }).then(function(res) {
        return deferred.resolve(res);
      });
    };
    if (apiAuth.all) {
      fileReader = new FileReader();
      fileReader.onload = function(e) {
        query = {
          arrayBuffer: e.target.result,
          size: e.total,
          type: file.type
        };
        return $rootScope.$apply(postIt);
      };
      fileReader.readAsArrayBuffer(file);
      return deferred.promise;
    } else {
      return false;
    }
  };
  service.uploadNoteFile = function(client, note, file) {
    var apiAuth, deferred, fileReader, postIt, query;
    deferred = $q.defer();
    apiAuth = authService.enableAuth();
    query = {
      binary: null,
      id: null
    };
    postIt = function() {
      var formData;
      formData = new FormData();
      formData.append('file', file);
      formData.append('name', file.name);
      return apiAuth.one('api/client', client.id).one('note', note.id).withHttpConfig({
        transformRequest: angular.identity
      }).customPOST(formData, 'file', void 0, {
        'Content-Type': void 0
      }).then(function(res) {
        return deferred.resolve(res);
      });
    };
    if (apiAuth.all) {
      fileReader = new FileReader();
      fileReader.onload = function(e) {
        query = {
          arrayBuffer: e.target.result,
          size: e.total,
          type: file.type
        };
        return $rootScope.$apply(postIt);
      };
      fileReader.onloadstart = function() {
        return console.log('onloadstart', arguments);
      };
      fileReader.onloadprogress = function() {
        return console.log('onloadprogress', arguments);
      };
      fileReader.onerror = function() {
        return console.log('onerror', arguments);
      };
      fileReader.readAsArrayBuffer(file);
      return deferred.promise;
    } else {
      return false;
    }
  };
  return service;
});

// ---
// generated by coffee-script 1.9.0